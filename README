


Name: Michael Elyafi

-----------------------------------------------

Describe what augmentations to the bst data structures you made to complete the 
project -- i.e., what typedefs did you change and why?

I added in val, size, lNode, rNode, and work.
I added val because it gives me the value of the current node.
size is all the elements in all the subtrees and + 1 for the root.
lNode is for the num of nodes in the left subtree.
rNode is for the num of nodes in the right subtree.
lNode is for the num of nodes in the left subtree.
work is the num of nodes that get changed when the tree balances.
-----------------------------------------------
Which functions did you need to modify as a result of the augmentations from the previous
question?  
I needed to modify insert, remove, from_array, bst_size.
Insert and remove use my augmentations to maintain the size balance when there is a violating node.
They also have book keeping properties that keep track of the subtree lengths, and the amount of work done.
from_array uses them to the book keeping updated.
bst_size uses the size augment to return how many nodes are in the tree.

-----------------------------------------------
For each function from the previous question, how did you ensure that the (assymptotic) runtime 
remained the same?
I ensured that the runtimes for insert, remove, and from_array stayed the same.
size became faster with my modifcation.
For insert and remove, adding in the book keeping and balance changed the runtime from O(h) to O(log n)
from_array maintains the same runtime as adding book keeping didn't change anything.

-----------------------------------------------
For each of the assigned functions, tell us how far you got using the choices 0-5 and
answer the given questions.  


0:  didn't get started
1:  started, but far from working
2:  have implementation but only works for simple cases
3:  finished and I think it works most of the time but not sure the runtime req is met. 
4:  finished and I think it works most of the time and I'm sure my design leads to 
       the correct runtime (even if I still have a few bugs).
5:  finished and confident on correctness and runtime requirements


bst_to_array level of completion:  _____5______  

-----------------------------------------------
bst_get_ith level of completion:  _______4____  

    How did you ensure O(h) runtime?

    ANSWER:
I ensured O(h) runtime with splitting the tree at the start into either the right or left sub trees.
It then repeats that with the recursion on every level.
-----------------------------------------------
bst_get_nearest level of completion:  _____5______  

    How did you ensure O(h) runtime?

    ANSWER:
My get nearest checks if x is bigger or smaller than the current node value, off that it decides to either go left or right.
-----------------------------------------------
bst_num_geq level of completion:  _____5______  

    How did you ensure O(h) runtime?

    ANSWER:
My runtime is O(h) because it checks splits the tree as soon as it checks if the root is bigger or smaller than x.
-----------------------------------------------
bst_num_leq level of completion:  _____5_______

    How did you ensure O(h) runtime?

    ANSWER:
My runtime is O(h) because it checks splits the tree as soon as it checks if the root is bigger or smaller than x.
-----------------------------------------------
bst_num_range level of completion:  _______5_____

    How did you ensure O(h) runtime?

    ANSWER:
My range function utilizes num_geq and num_leq which both run in O(h) runtime.
-----------------------------------------------
Implementation of size-balanced criteria according to 
the given guidelines (including bst_sb_work):

    Level of completion: _______5____


Write a few sentences describing how you tested your solutions.  Are there
any tests that in retrospect you wish you'd done?

My test cases go in depth per function, testing extreme limits that force a single answer to be possible.
They went through the child trees of the bst traversing them and making sure book keeping was in place.

I wish I had done more testing on ith to make that work better.

